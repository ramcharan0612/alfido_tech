import java.sql.*;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Scanner;

public class LibraryManagement {

    private static final String DB_URL = "jdbc:sqlite:library.db";

    public static void main(String[] args) {
        setupDatabase();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nLibrary Management System");
            System.out.println("1. Add Book");
            System.out.println("2. Remove Book");
            System.out.println("3. Update Book Details");
            System.out.println("4. View Books");
            System.out.println("5. Borrow Book");
            System.out.println("6. Return Book");
            System.out.println("7. Exit");
            System.out.print("Choose an option: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1 -> addBook(scanner);
                case 2 -> removeBook(scanner);
                case 3 -> updateBook(scanner);
                case 4 -> viewBooks();
                case 5 -> borrowBook(scanner);
                case 6 -> returnBook(scanner);
                case 7 -> {
                    System.out.println("Exiting the system. Goodbye!");
                    scanner.close();
                    return;
                }
                default -> System.out.println("Invalid option. Please try again.");
            }
        }
    }

    private static void setupDatabase() {
        try (Connection conn = DriverManager.getConnection(DB_URL)) {
            Statement stmt = conn.createStatement();

            // Create books table
            String createBooksTable = """
                CREATE TABLE IF NOT EXISTS books (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title TEXT NOT NULL,
                    author TEXT NOT NULL,
                    available INTEGER DEFAULT 1
                );
            """;
            stmt.execute(createBooksTable);

            // Create transactions table
            String createTransactionsTable = """
                CREATE TABLE IF NOT EXISTS transactions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    book_id INTEGER NOT NULL,
                    borrower_name TEXT NOT NULL,
                    borrow_date TEXT NOT NULL,
                    due_date TEXT NOT NULL,
                    return_date TEXT,
                    fine REAL DEFAULT 0,
                    FOREIGN KEY (book_id) REFERENCES books (id)
                );
            """;
            stmt.execute(createTransactionsTable);
        } catch (SQLException e) {
            System.err.println("Error setting up database: " + e.getMessage());
        }
    }

    private static void addBook(Scanner scanner) {
        System.out.print("Enter book title: ");
        String title = scanner.nextLine();
        System.out.print("Enter book author: ");
        String author = scanner.nextLine();

        try (Connection conn = DriverManager.getConnection(DB_URL)) {
            String sql = "INSERT INTO books (title, author) VALUES (?, ?)";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, title);
            pstmt.setString(2, author);
            pstmt.executeUpdate();
            System.out.println("Book added successfully!");
        } catch (SQLException e) {
            System.err.println("Error adding book: " + e.getMessage());
        }
    }

    private static void removeBook(Scanner scanner) {
        System.out.print("Enter book ID to remove: ");
        int bookId = scanner.nextInt();

        try (Connection conn = DriverManager.getConnection(DB_URL)) {
            String sql = "DELETE FROM";
        }
    }
